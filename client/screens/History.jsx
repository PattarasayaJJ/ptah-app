import React, { useState, useEffect, useContext } from "react";
import { View, Text, StyleSheet, ActivityIndicator } from "react-native";
import { Calendar, LocaleConfig } from "react-native-calendars";
import axios from "axios";
import { AuthContext } from "../context/authContext";

// üîπ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ react-native-calendars ‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
LocaleConfig.locales["th"] = {
  monthNames: [
    "‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°", "‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå", "‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°", "‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô", "‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°", "‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô",
    "‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°", "‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°", "‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô", "‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°", "‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô", "‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°"
  ],
  monthNamesShort: [
    "‡∏°.‡∏Ñ.", "‡∏Å.‡∏û.", "‡∏°‡∏µ.‡∏Ñ.", "‡πÄ‡∏°.‡∏¢.", "‡∏û.‡∏Ñ.", "‡∏°‡∏¥.‡∏¢.",
    "‡∏Å.‡∏Ñ.", "‡∏™.‡∏Ñ.", "‡∏Å.‡∏¢.", "‡∏ï.‡∏Ñ.", "‡∏û.‡∏¢.", "‡∏ò.‡∏Ñ."
  ],
  dayNames: [
    "‡∏ß‡∏±‡∏ô‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå", "‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå", "‡∏ß‡∏±‡∏ô‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£", "‡∏ß‡∏±‡∏ô‡∏û‡∏∏‡∏ò",
    "‡∏ß‡∏±‡∏ô‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ", "‡∏ß‡∏±‡∏ô‡∏®‡∏∏‡∏Å‡∏£‡πå", "‡∏ß‡∏±‡∏ô‡πÄ‡∏™‡∏≤‡∏£‡πå"
  ],
  dayNamesShort: ["‡∏≠‡∏≤.", "‡∏à.", "‡∏≠.", "‡∏û.", "‡∏û‡∏§.", "‡∏®.", "‡∏™."]
};
LocaleConfig.defaultLocale = "th";

const History = () => {
  const [authState] = useContext(AuthContext);
  const [markedDates, setMarkedDates] = useState({});
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  const userId = authState?.user?._id;

  useEffect(() => {
    const fetchCalendarData = async () => {
      if (!userId) {
        console.warn("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö user ID, ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤");
        setLoading(false);
        return;
      }

      try {
        setLoading(true);
        const response = await axios.get(
          `http://10.0.2.2:8080/api/v1/main/datacalendar/${userId}`,
          {
            headers: { Authorization: `Bearer ${authState.token}` },
          }
        );

        console.log("üìå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å API:", response.data);

        if (!response.data || !Array.isArray(response.data)) {
          throw new Error("‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
        }

        const newMarkedDates = {};
        const today = new Date().toISOString().split("T")[0];

        response.data.forEach((item) => {
          const dateKey = item.date;
          const showStar = Boolean(item.star);
          let textColor = "#0096FF";

          if (dateKey > today) {
            textColor = "gray";
          } else if (item.status === "notsent") {
            textColor = "#93C5FD";
          } else if (item.status === 0) {
            textColor = "#1DD345";
          } else if (item.status === 1) {
            textColor = "orange";
          }

          newMarkedDates[dateKey] = {
            showStar: showStar,
            customStyles: {
              container: { flexDirection: "column", alignItems: "center" },
              text: {
                color: textColor,
                fontWeight: "bold",
                fontSize: 16,
                textAlign: "center",
              },
            },
          };
        });

        

        console.log("üìå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• markedDates ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß:", newMarkedDates);
        setMarkedDates(newMarkedDates);
        setError(null);
      } catch (err) {
        console.error("‚ùå ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô:", err.response || err);
        setError("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
      } finally {
        setLoading(false);
      }
    };

    fetchCalendarData();
  }, [authState]);

  return (
    <View style={styles.container}>
      <Text style={styles.heading}>‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Å‡∏≤‡∏¢‡∏†‡∏≤‡∏û</Text>
      {loading ? (
        <ActivityIndicator size="large" color="#2B7AAC" />
      ) : (
        <Calendar
          markedDates={markedDates}
          markingType="custom"
          hideExtraDays={true}
          style={styles.calendar} // üîπ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡∏á‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô
          renderHeader={(date) => {
            // üîπ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏õ‡∏µ ‡∏Ñ.‡∏®. ‡πÄ‡∏õ‡πá‡∏ô ‡∏û.‡∏®. (‡∏ö‡∏ß‡∏Å 543)
            const year = date.getFullYear() + 543;
            const month = LocaleConfig.locales["th"].monthNames[date.getMonth()];
            return (
              <Text style={styles.headerText}>
                {month} {year}
              </Text>
            );
          }}
          theme={{
            todayBackgroundColor: "#B9E4FF",
            arrowColor: "#2B7AAC",
            textMonthFontSize: 20,
            textDayFontSize: 18,
            textDayHeaderFontSize: 16,
            textMonthFontFamily: "Kanit",
            textDayFontFamily: "Kanit",
            textDayHeaderFontFamily: "Kanit",
            calendarBackground: "#F5FBFF", // üîπ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡∏á‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô

          }}
          dayComponent={({ date }) => {
            const marking = markedDates[date.dateString];
            const today = new Date().setHours(0, 0, 0, 0);
            const dayDate = new Date(date.dateString).setHours(0, 0, 0, 0);
          
            let textColor = "#000"; // ‡∏™‡∏µ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏î‡∏≥
          
            if (marking) {
              textColor = marking.customStyles?.text?.color || "#000";
            } else if (dayDate < today) {
              textColor = "red"; // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πÅ‡∏î‡∏á
            } else if (dayDate > today) {
              textColor = "lightgray"; // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πÄ‡∏ó‡∏≤‡∏≠‡πà‡∏≠‡∏ô
            }

            return (
              <View style={styles.dayContainer}>
                {marking && marking.showStar && (
                  <Text style={styles.star}>‚≠ê</Text>
                )}
                <Text style={[styles.dayText, { color: textColor }]}>
                  {date.day}
                </Text>
              </View>
            );
          }}
        />
      )}

      {/* ‡∏™‡πà‡∏ß‡∏ô Legend ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ï‡πà‡∏≤‡∏á‡πÜ */}
      <View style={styles.legendContainer}>
        <LegendItem color="#1DD345" label="‡∏ó‡∏≥‡πÑ‡∏î‡πâ‡∏î‡∏µ" />
        <LegendItem color="orange" label="‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á" />
        <LegendItem color="#93C5FD" label="‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô" />
        <LegendItem color="red" label="‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏ö‡∏≥‡∏ö‡∏±‡∏î" />
        <Text style={styles.getstar}>‚≠ê ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏Å‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏Ñ‡∏£‡∏ö‡∏ó‡∏±‡πâ‡∏á 4 ‡∏î‡πà‡∏≤‡∏ô </Text>
      </View>
    </View>
  );
};

// ‡∏Ñ‡∏≠‡∏°‡πÇ‡∏û‡πÄ‡∏ô‡∏ô‡∏ï‡πå LegendItem ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
const LegendItem = ({ color, label }) => (
  <View style={styles.legendItem}>
    <View style={[styles.legendCircle, { backgroundColor: color }]} />
    <Text style={styles.legendText}>{label}</Text>
  </View>
);

const styles = StyleSheet.create({
  container: { flex: 1, padding: 20, backgroundColor: "white" },
  heading: {
    fontSize: 24,
    fontFamily: "Kanit",
    borderLeftWidth: 3,
    paddingLeft: 10,
    borderColor: "#87CEFA",
    color: "#333",
  },
  dayContainer: {
    alignItems: "center",
    justifyContent: "center",
    width: 32,
    height: 32,
  },
  star: {
    position: "absolute",
    top: -10,
    alignSelf: "center",
    fontSize: 14,
    color: "#FFD700",
  },
  dayText: {
    fontSize: 16,
    fontWeight: "bold",
  },
  legendContainer: {
    marginTop: 30,
    padding: 10,
    backgroundColor: "white",
    borderRadius: 10,
    elevation: 2,
  },
  legendItem: {
    flexDirection: "row",
    alignItems: "center",
    marginVertical: 5,
  },
  legendCircle: {
    width: 15,
    height: 15,
    borderRadius: 15 / 2,
    marginRight: 10,
  },
  legendText: {
    fontSize: 16,
    fontFamily: "Kanit",
  },
  getstar: {
    fontSize: 16,
    marginTop: 5,
    fontFamily: "Kanit",
  },
  headerText:{
    fontSize: 20,
    fontFamily: "Kanit",
    color:"#2B7AAC"
  },
  calendar:{
    borderRadius:15,
    marginTop:15
  }
});

export default History;
