const { StatusCodes } = require("http-status-codes");
const Evaluate = require("../models/evaluateModel.js");
const feedbackModel = require("../models/feedbackModel.js");
const mongoose = require("mongoose");

const getDataCalendar = async (req, res) => {
    try {
        const { id } = req.params;
        if (!id) {
            return res.status(StatusCodes.BAD_REQUEST).json({ message: "User ID is required" });
        }

        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ `id` ‡πÄ‡∏õ‡πá‡∏ô `ObjectId` ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        if (!mongoose.Types.ObjectId.isValid(id)) {
            return res.status(StatusCodes.BAD_REQUEST).json({ message: "Invalid User ID" });
        }

        console.log(`üõ†Ô∏è Fetching calendar data for user ID: ${id}`);

        // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        const evaluations = await Evaluate.find({ userId: id }).lean();
        const feedbacks = await feedbackModel.find({ user_id: id }).lean();

        // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö `[]` ‡πÅ‡∏ó‡∏ô `404`
        if (!evaluations.length && !feedbacks.length) {
            console.log("‚ö†Ô∏è No data found, returning empty array.");
            return res.status(StatusCodes.OK).json([]); // ‚úÖ ‡∏™‡πà‡∏á `200 OK` ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡πà‡∏≤‡∏á
        }

        // ‚úÖ ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Calendar
        const calendarMap = {};
        const dateCount = {};

        // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Evaluations
        evaluations.forEach((evalData) => {
            const dateKey = evalData.created_at.toISOString().split("T")[0];

            if (!calendarMap[dateKey]) {
                calendarMap[dateKey] = { created_at: evalData.created_at, star: false, feedback_date: null, feedback_status: "notsent" };
            }

            dateCount[dateKey] = (dateCount[dateKey] || 0) + 1;
        });

        // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏ß‡∏±‡∏ô‡πÉ‡∏î‡∏°‡∏µ 4 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ‡πÉ‡∏´‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î `feedback_date = ""` ‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏î‡∏≤‡∏ß ‚≠ê
        Object.keys(dateCount).forEach((dateKey) => {
            if (dateCount[dateKey] === 4 && !calendarMap[dateKey].feedback_date) {
                calendarMap[dateKey].feedback_date = "";
                calendarMap[dateKey].star = true; // ‚≠ê ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏î‡∏≤‡∏ß
            }
        });

        // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Feedbacks (‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ `evaluation_date.toISOString()`)
        feedbacks.forEach((fb) => {
            let dateKey = fb.evaluation_date;

            // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Date ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if (dateKey instanceof Date) {
                dateKey = dateKey.toISOString().split("T")[0]; // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô YYYY-MM-DD
            } else if (typeof dateKey === "string") {
                dateKey = dateKey.split("T")[0]; // ‡πÅ‡∏õ‡∏•‡∏á String ‡πÄ‡∏õ‡πá‡∏ô YYYY-MM-DD
            } else {
                console.warn("‚ö†Ô∏è Invalid evaluation_date:", fb.evaluation_date);
                return; // ‡∏Ç‡πâ‡∏≤‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
            }

            // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
            if (!calendarMap[dateKey]) {
                calendarMap[dateKey] = { created_at: null, star: false, feedback_date: dateKey, feedback_status: "notsent" };
            }

            // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ 4 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ‚Üí ‡πÅ‡∏™‡∏î‡∏á ‚≠ê
            if (dateCount[dateKey] === 4) {
                calendarMap[dateKey].star = true;
            }

            // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á `feedback_type` ‡πÄ‡∏õ‡πá‡∏ô `feedback_status`
            switch (fb.feedback_type) {
                case "‡∏ó‡∏≥‡πÑ‡∏î‡πâ‡∏î‡∏µ":
                    calendarMap[dateKey].feedback_status = 0;
                    break;
                case "‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á":
                    calendarMap[dateKey].feedback_status = 1;
                    break;
            }
        });

        // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô Array ‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô React Native
        const calendarData = Object.keys(calendarMap).map(dateKey => ({
            date: dateKey,
            status: calendarMap[dateKey].feedback_status,
            star: calendarMap[dateKey].star || false
        }));

        console.log("‚úÖ Final Calendar Data for User:", id, calendarData);
        res.status(StatusCodes.OK).json(calendarData);
    } catch (error) {
        console.error("‚ùå Error fetching calendar data:", error);
        res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({ message: "Internal Server Error" });
    }
};

module.exports = { getDataCalendar };
