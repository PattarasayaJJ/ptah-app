const mongoose = require("mongoose");
const UserModel = require("../models/userModel");
const MissionModel = require("../models/missionModel");
const SubMissionModel = require("../models/subMissionModel");
const EvaluateModel = require("../models/evaluateModel");

const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));
// Create Mission
const createMissionController = async (req, res) => {
  try {
    const { no, name } = req.body;
    if (!no || !name) {
      return res
        .status(400)
        .send({ success: false, message: "Please provide all fields" });
    }

    const mission = await MissionModel.create({
      name,
      no,
    });

    res.status(201).send({
      success: true,
      message: "mission created successfully",
      mission,
    });
  } catch (error) {
    console.error("Error in create mission:", error);
    res.status(500).send({
      success: false,
      message: "Error in create mission API",
      error,
    });
  }
};

// Get All mission
// const getAllMissionController = async (req, res) => {
//   try {
//     console.log("req", req);

//     const mission = await MissionModel.find();

//     res.status(200).send({
//       success: true,
//       message: "All mission retrieved successfully",
//       mission,
//     });
//   } catch (error) {
//     console.error("Error in get all mission:", error);
//     res.status(500).send({
//       success: false,
//       message: "Error in get all mission API",
//       error,
//     });
//   }
// };
const getAllMissionController = async (req, res) => {
  try {
    const missions = await MissionModel.find();

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ mission ‡∏ó‡∏µ‡πà‡∏°‡∏µ isEvaluate === true
    const updatedMissions = await Promise.all(
      missions.map(async (mission) => {
        if (mission.isEvaluate) {
          const today = new Date();
          today.setHours(0, 0, 0, 0); // ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡πá‡∏ô 00:00:00 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ß‡∏±‡∏ô

          const evaluate = await EvaluateModel.findOne({
            missionId: mission._id,
            created_at: {
              $gte: today, // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
              $lt: new Date(today.getTime() + 86400000), // ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
            },
          });

          return {
            ...mission.toObject(),
            isEvaluatedToday: evaluate ? 1 : 0,
          };
        }
        return {
          ...mission.toObject(),
          isEvaluatedToday: null,
        };
      })
    );

    res.status(200).send({
      success: true,
      message: "All missions retrieved successfully",
      missions: updatedMissions,
    });
  } catch (error) {
    console.error("Error in get all missions:", error);
    res.status(500).send({
      success: false,
      message: "Error in get all missions API",
      error,
    });
  }
};

// Create sub Mission
const createSubMissionController = async (req, res) => {
  try {
    const { videoUrl, photoUrl, evaluate, name } = req.body;
    if (!videoUrl || !photoUrl || !name) {
      return res
        .status(400)
        .send({ success: false, message: "Please provide all fields" });
    }

    const subMission = await SubMissionModel.create({
      name,
      videoUrl,
      photoUrl,
      evaluate: !evaluate ? false : evaluate,
    });

    res.status(201).send({
      success: true,
      message: "subMission created successfully",
      subMission,
    });
  } catch (error) {
    console.error("Error in create subMission:", error);
    res.status(500).send({
      success: false,
      message: "Error in create subMission API",
      error,
    });
  }
};

// Update Submission
const updateSubmissionController = async (req, res) => {
  try {
    const { id } = req.params; // ‡∏£‡∏±‡∏ö id ‡∏Ç‡∏≠‡∏á mission ‡∏à‡∏≤‡∏Å URL
    const { submission } = req.body; // ‡∏£‡∏±‡∏ö submission array ‡∏à‡∏≤‡∏Å body

    if (!id || !submission) {
      return res.status(400).send({
        success: false,
        message: "Please provide all required fields",
      });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ submission ‡πÄ‡∏õ‡πá‡∏ô array ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!Array.isArray(submission)) {
      return res.status(400).send({
        success: false,
        message: "Submission must be an array of strings",
      });
    }

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï submission ‡πÉ‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
    const updatedMission = await MissionModel.findByIdAndUpdate(
      id,
      { submission },
      { new: true } // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏´‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
    );

    if (!updatedMission) {
      return res
        .status(404)
        .send({ success: false, message: "Mission not found" });
    }

    res.status(200).send({
      success: true,
      message: "Submission updated successfully",
      mission: updatedMission,
    });
  } catch (error) {
    console.error("Error in update submission:", error);
    res.status(500).send({
      success: false,
      message: "Error in update submission API",
      error,
    });
  }
};

const getSubmissionDataController = async (req, res) => {
  try {
    const { id } = req.params; // ‡∏£‡∏±‡∏ö mission ID ‡∏à‡∏≤‡∏Å URL

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ mission ‡∏ï‡∏≤‡∏° id
    const mission = await MissionModel.findById(id);
    if (!mission) {
      return res.status(404).send({
        success: false,
        message: "Mission not found",
      });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ submission ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!mission.submission || mission.submission.length === 0) {
      return res.status(200).send({
        success: true,
        message: "No submission data available",
        data: [],
      });
    }
    console.log("mission", mission);

    // Loop ‡∏´‡∏≤ SubMission ‡∏ï‡∏≤‡∏° ID ‡πÉ‡∏ô submission
    const submissions = [];
    mission.submission.map(async (submissionId) => {
      // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ SubMission ‡∏ó‡∏µ‡∏•‡∏∞ ID
      console.log("submissionId", submissionId);

      const data = await SubMissionModel.findById(submissionId);
      console.log("data", data);
      submissions.push(data || null);
      // return data || null; // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ null
    });
    await delay(200);

    // ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏•‡∏±‡∏ö
    res.status(200).send({
      success: true,
      message: "Submission data retrieved successfully",
      data: {
        mission,
        submissions,
      },
    });
  } catch (error) {
    console.error("Error in getting submission data:", error);
    res.status(500).send({
      success: false,
      message: "Error in getting submission data API",
      error,
    });
  }
};

// send Evaluate
const snedEvaluateController = async (req, res) => {
  try {
    const { userId, missionId, suggestion, answers, timeSpent } = req.body;
    if (!userId || !missionId || !timeSpent || !answers) {
      return res
        .status(400)
        .send({ success: false, message: "Please provide all fields" });
    }

    const evaluate = await EvaluateModel.create({
      userId,
      missionId,
      suggestion,
      answers,
      timeSpent,
    });

    res.status(201).send({
      success: true,
      message: "evaluate created successfully",
      evaluate,
      // user,
    });
  } catch (error) {
    console.error("Error in create evaluate:", error);
    res.status(500).send({
      success: false,
      message: "Error in create evaluate API",
      error,
    });
  }
};

const addStarToUserController = async (req, res) => {
  try {
    console.log("üîç Checking if user qualifies for stars...");

    const { _id } = req.auth;
    if (!_id) {
      return res.status(400).send({
        success: false,
        message: "‚ùå User ID is required",
      });
    }

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const user = await UserModel.findById(_id);
    if (!user) {
      return res.status(404).send({
        success: false,
        message: "‚ùå User not found",
      });
    }

    // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏î‡∏≤‡∏ß‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const lastStarredDate = user.lastStarredAt
      ? user.lastStarredAt.toISOString().split("T")[0]
      : null;
    const todayDate = new Date().toISOString().split("T")[0];

    if (lastStarredDate === todayDate) {
      return res.status(400).send({
        success: false,
        message: "‚ùå User has already received a star today!",
      });
    }

    // ‚úÖ ‡πÉ‡∏´‡πâ‡∏î‡∏≤‡∏ß +1 ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï lastStarredAt ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
    const updatedUser = await UserModel.findByIdAndUpdate(
      _id,
      {
        $inc: { stars: 1 }, // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤ stars +1
        $set: { lastStarredAt: new Date() }, // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏î‡∏≤‡∏ß
      },
      { new: true } // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤
    );

    return res.status(200).send({
      success: true,
      message: "‚≠ê User received a star!",
      updatedUser,
    });
  } catch (error) {
    console.error("‚ùå Error in addStarToUserController:", error);
    return res.status(500).send({
      success: false,
      message: "‚ùå Error in adding stars to user",
      error,
    });
  }
};

module.exports = {
  createMissionController,
  getAllMissionController,
  createSubMissionController,
  updateSubmissionController,
  getSubmissionDataController,
  snedEvaluateController,
  addStarToUserController,
};
